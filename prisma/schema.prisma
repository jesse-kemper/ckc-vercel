datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?   // For storing hashed passwords
  emailVerified DateTime?
  image         String?
  locationId    Int?      // New column for Location ID
  location      Location? @relation(fields: [locationId], references: [id]) // Define the relationship
  accounts      Account[]
  sessions      Session[]
  petLogs       PetLog[]
}

model Location {
  id           Int      @id @default(autoincrement())
  locationName String
  users        User[]   // Define back-relation with User
  PetLog       PetLog[]
}

model PetLog {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  petName        String
  roomNumber     String
  date           DateTime
  elimination    String
  consumption    String
  medication     String
  gcu            String
  tmInitials     String
  smellDirty     Boolean
  pawsSoiled     Boolean
  bodySoiled     Boolean
  oilyDirty      Boolean
  petType        String
  runnerInitials String
  userId         String
  locationId     Int
  user           User     @relation(fields: [userId], references: [id])
  location       Location @relation(fields: [locationId], references: [id])
}
